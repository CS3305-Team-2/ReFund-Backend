buildscript {
    repositories {
        mavenCentral()
        jcenter()
        /* maven {
            url "https://repo.flywaydb.org/repo"
            credentials {
                username ''
                password 'flyway'
            }
        } */
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE"
        /* classpath "org.flywaydb.pro:flyway-gradle-plugin:5.2.4" */
    }
}

plugins {
    id "com.wiredforcode.spawn" version "0.8.2"
    id "org.flywaydb.flyway" version "5.2.4"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar {
    baseName = 'refund-backend'
}

repositories {
    mavenCentral()
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

def props = new Properties()
file("src/main/resources/application.properties").withInputStream { props.load(it) }

def ssh_host = props.getProperty("ssh.host")
def ssh_port = props.getProperty("ssh.port")
def ssh_user = props.getProperty("ssh.user")
def mysql_user = props.getProperty("spring.datasource.username")
def mysql_pass = props.getProperty("spring.datasource.password")
def mysql_url = props.getProperty("spring.datasource.url")

// this will be the case if we copied the application.properties template as defined in the Dockerfile
// in development, this will be set to not 'username'
def is_ci = props.getProperty("ssh.user") == "username"

flyway {
    user = ((is_ci) ? System.getenv("MYSQL_USER") : mysql_user)
    url = ((is_ci) ? System.getenv("MYSQL_URL") : mysql_url)
    password = ((is_ci) ? System.getenv("MYSQL_PASS") : mysql_pass)
    /* licenseKey = '' */
}

task startSSHTunnel(type: SpawnProcessTask) { 
    command "sshpass -p ${props.getProperty('ssh.pass')} ssh -v -oConnectTimeout=30 -oStrictHostKeyChecking=no -l ${ssh_user} -L${ssh_port}:localhost:${ssh_port} ${ssh_user}@${ssh_host}"
    ready 'Authentication succeeded'
}

task stopSSHTunnel(type: KillProcessTask)

task sshWrapper(dependsOn: ['startSSHTunnel'], type: Test) {
    systemProperty "service..endpoint",  "localhost:${ssh_port}"
}

bootRun.dependsOn sshWrapper
bootRun.finalizedBy stopSSHTunnel

if(!is_ci) {
    flywayMigrate.dependsOn sshWrapper
    flywayMigrate.finalizedBy stopSSHTunnel

    flywayRepair.dependsOn sshWrapper
    flywayRepair.finalizedBy stopSSHTunnel

    flywayUndo.dependsOn sshWrapper
    flywayUndo.finalizedBy stopSSHTunnel
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile "at.favre.lib:bcrypt:0.7.0"
    compile 'mysql:mysql-connector-java'
    compile 'javax.xml.bind:jaxb-api'
    
    compile 'io.springfox:springfox-swagger2:2.9.2'

    compile 'io.jsonwebtoken:jjwt-api:0.10.5'
    runtime 'io.jsonwebtoken:jjwt-impl:0.10.5'
    runtime 'org.bouncycastle:bcprov-jdk15on:1.60'
    runtime 'io.jsonwebtoken:jjwt-jackson:0.10.5'
    
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    developmentOnly "org.springframework.boot:spring-boot-devtools"
}