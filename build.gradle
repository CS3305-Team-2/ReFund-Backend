
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE"
    }
}

plugins {
    id "com.wiredforcode.spawn" version "0.8.2"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar {
    baseName = 'refund-backend'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

def props = new Properties()
file("src/main/resources/application.properties").withInputStream { props.load(it) }

task startSSHTunnel(type: SpawnProcessTask) {
    def host = props.getProperty("ssh.host")
    def port = props.getProperty("ssh.port")
    def user = props.getProperty("ssh.user")
    command "sshpass -p ${props.getProperty('ssh.pass')} ssh -v -oConnectTimeout=30 -oStrictHostKeyChecking=no -l ${user} -L${port}:localhost:${port} ${user}@${host}"
    ready 'Authentication succeeded' // this is printed by the SSH session's debug trace when connection has been successful
}

task stopSSHTunnel(type: KillProcessTask)

task sshWrapper(dependsOn: ['startSSHTunnel'], type: Test) {
    def port = props.getProperty("ssh.port")
    systemProperty "service..endpoint",  "localhost:${port}"
}

bootRun.dependsOn sshWrapper

bootRun.finalizedBy stopSSHTunnel

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile "at.favre.lib:bcrypt:0.7.0"
    compile 'mysql:mysql-connector-java'
    compile 'javax.xml.bind:jaxb-api'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    developmentOnly "org.springframework.boot:spring-boot-devtools"
}